component ModuleType1
    % ModuleType1:2
    % Module Block
    %    Model resolution: Grouped
    %    Number of parallel assemblies: 18
    %    Number of cells per parallel assembly: 1
    %    Series grouping simulation strategy: [1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
    %    Parallel grouping simulation strategy: [1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
    %
    %    MATLAB version: 9.14
    %    Simscape Battery version: 1.1
    %    Simscape code generated on: 09-Oct-2024 15:49:17

    parameters
        SOC_vecCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        T_vecCell = {[278, 293, 313],'K'}; % Vector of temperatures, T
        V0_matCell = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, V0(SOC,T)
        V_rangeCell = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_matCell = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Terminal resistance, R0(SOC,T)
        AHCell = {27,'A*hr'}; % Cell capacity, AH
        extrapolation_optionCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        R1_matCell = {[.0109, .0029, .0013; .0069, .0024, .0012; .0047, .0026, .0013; .0034, .0016, .001; .0033, .0023, .0014; .0033, .0018, .0011; .0028, .0017, .0011],'Ohm'}; % First polarization resistance, R1(SOC,T)
        tau1_matCell = {[20, 36, 39; 31, 45, 39; 109, 105, 61; 36, 29, 26; 59, 77, 67; 40, 33, 29; 25, 39, 33],'s'}; % First time constant, tau1(SOC,T)
        R2_matCell = {[.0109, .0029, .0013; .0069, .0024, .0012; .0047, .0026, .0013; .0034, .0016, .001; .0033, .0023, .0014; .0033, .0018, .0011; .0028, .0017, .0011],'Ohm'}; % Second polarization resistance, R2(SOC,T)
        tau2_matCell = {[20, 36, 39; 31, 45, 39; 109, 105, 61; 36, 29, 26; 59, 77, 67; 40, 33, 29; 25, 39, 33],'s'}; % Second time constant, tau2(SOC,T)
        R3_matCell = {[.0109, .0029, .0013; .0069, .0024, .0012; .0047, .0026, .0013; .0034, .0016, .001; .0033, .0023, .0014; .0033, .0018, .0011; .0028, .0017, .0011],'Ohm'}; % Third polarization resistance, R3(SOC,T)
        tau3_matCell = {[20, 36, 39; 31, 45, 39; 109, 105, 61; 36, 29, 26; 59, 77, 67; 40, 33, 29; 25, 39, 33],'s'}; % Third time constant, tau3(SOC,T)
        thermal_massCell = {100,'J/K'}; % Thermal mass
        CellBalancingClosedResistance = {0.01,'Ohm'}; % Cell balancing switch closed resistance
        CellBalancingOpenConductance = {1e-8,'1/Ohm'}; % Cell balancing switch open conductance
        CellBalancingThreshold = {0.5,'1'}; % Cell balancing switch operation threshold
        CellBalancingResistance = {50,'Ohm'}; % Cell balancing shunt resistance
    end

    parameters(ExternalAccess=none)
        P = 1; % Batteries in Parallel
        S = 18; % Batteries in Series
        SeriesGrouping = [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]; % Series grouping simulation strategy
        ParallelGrouping = [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]; % Parallel grouping simulation strategy
    end

    parameters(Access=private)
        CumNumModules = cumsum(SeriesGrouping); % Cumulative number of modules
        TotalNumModels = sum(ParallelGrouping); % Total number of cell models
        ModelToLumpMapping = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]; % Mapping of models to lumps
        SeriesConnections = find(diff(ModelToLumpMapping)) + 1; % Series connections
        ParallelConnections = find(~diff(ModelToLumpMapping)) + 1; % Parallel connections
    end

    inputs
        enableCellBalancing = {repmat(0,S,1),'1'}; % CB
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
    end

    variables
        iCell = {repmat(0,18,1),'A'}; % Cell current (positive in)
        vCell = {repmat(0,18,1),'V'}; % Cell terminal voltage
        socCell = {value={repmat(1,18,1),'1'},priority=priority.high}; % Cell state of charge
        numCyclesCell = {value={repmat(0,18,1),'1'},priority=priority.high}; % Cell discharge cycles
        temperatureCell = {value={repmat(298.15,18,1),'K'},priority=priority.high}; % Cell temperature
        vParallelAssembly = {value={repmat(0,18,1),'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={repmat(1,18,1),'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    intermediates
        power_dissipated = sum([Cell1(:).power_dissipated].*((P./ParallelGrouping(ModelToLumpMapping).*SeriesGrouping(ModelToLumpMapping))-1)); % Power dissipated by grouped cells
    end

    equations
        assert(length(iCell) == TotalNumModels);
        assert(length(vCell) == TotalNumModels);
        assert(length(socCell) == TotalNumModels);
        assert(length(numCyclesCell) == TotalNumModels);
        assert(length(temperatureCell) == TotalNumModels);
        assert(length(vParallelAssembly) == S);
        assert(length(socParallelAssembly) == S);
    end

    connections
        connect(p,PositiveAdapter(1).LumpedNode);
        connect(n,NegativeAdapter(TotalNumModels).LumpedNode);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vecCell,T_vecCell,V0_matCell,V_rangeCell,R0_matCell,AHCell,extrapolation_optionCell),...
            UIGroup("Dynamics",R1_matCell,tau1_matCell,R2_matCell,tau2_matCell,R3_matCell,tau3_matCell),...
            UIGroup("Thermal",thermal_massCell),...
            UIGroup("Cell Balancing",CellBalancingClosedResistance,CellBalancingOpenConductance,CellBalancingThreshold,CellBalancingResistance)];
        Icon = 'module.svg';
    end

    for modelIdx = 1:TotalNumModels
        components(ExternalAccess=observe,CompileReuse=true)
            Cell1(modelIdx) = batteryecm.table_battery(SOC_vec = SOC_vecCell,...
                T_vec = T_vecCell,V0_mat = V0_matCell,V_range = V_rangeCell,R0_mat = R0_matCell,...
                AH = AHCell,extrapolation_option = extrapolation_optionCell,...
                R1_mat = R1_matCell,tau1_mat = tau1_matCell,R2_mat = R2_matCell,...
                tau2_mat = tau2_matCell,R3_mat = R3_matCell,tau3_mat = tau3_matCell,...
                thermal_mass = thermal_massCell,...
                T_dependence = simscape.enum.tablebattery.temperature_dependence.yes,prm_age_OCV = simscape.enum.tablebattery.prm_age_OCV.OCV,...
                prm_age_capacity = simscape.enum.tablebattery.prm_age.disabled,...
                prm_age_modeling = simscape.enum.tablebattery.prm_age_modeling.equation,...
                prm_age_resistance = simscape.enum.tablebattery.prm_age.disabled,...
                prm_dir = simscape.enum.tablebattery.prm_dir.noCurrentDirectionality,...
                prm_dyn = simscape.enum.tablebattery.prm_dyn.rc3,...
                prm_fade = simscape.enum.tablebattery.prm_fade.disabled,prm_leak = simscape.enum.tablebattery.prm_leak.disabled,...
                thermal_port = simscape.enum.thermaleffects.model,i.priority = priority.none,...
                v.priority = priority.none,stateOfCharge.priority = priority.none,...
                num_cycles.priority = priority.none,cell_temperature.priority = priority.none);
        end

        components(Access=private)
            PositiveAdapter(modelIdx) = PouchPack1LumpingAdapters.ElectricalLumpingAdapter(...
                CellsInParallel = P/ParallelGrouping(ModelToLumpMapping(modelIdx)),CellsInSeries = SeriesGrouping(ModelToLumpMapping(modelIdx)));
            NegativeAdapter(modelIdx) = PouchPack1LumpingAdapters.ElectricalLumpingAdapter(...
                CellsInParallel = P/ParallelGrouping(ModelToLumpMapping(modelIdx)),CellsInSeries = SeriesGrouping(ModelToLumpMapping(modelIdx)));
        end

        connections
            connect(NegativeAdapter(modelIdx).CellNode,Cell1(modelIdx).n);
            connect(PositiveAdapter(modelIdx).CellNode,Cell1(modelIdx).p);
        end
    end

    for parallelConnectionsIdx = ParallelConnections
        connections
            connect(PositiveAdapter(parallelConnectionsIdx-1).LumpedNode,PositiveAdapter(parallelConnectionsIdx).LumpedNode);
            connect(NegativeAdapter(parallelConnectionsIdx-1).LumpedNode,NegativeAdapter(parallelConnectionsIdx).LumpedNode);
        end
    end

    for seriesConnectionsIdx = SeriesConnections
        connections
            connect(NegativeAdapter(seriesConnectionsIdx-1).LumpedNode,PositiveAdapter(seriesConnectionsIdx).LumpedNode);
        end
    end

    for lumpIdx = 1:length(SeriesGrouping)
        components(ExternalAccess=observe)
            balancingSwitch(lumpIdx) = foundation.electrical.elements.controlled_switch(...
                R_closed = CellBalancingClosedResistance*SeriesGrouping(lumpIdx),...
                G_open = CellBalancingOpenConductance,...
                Threshold = CellBalancingThreshold);
            balancingResistor(lumpIdx) = foundation.electrical.elements.resistor(R = CellBalancingResistance*SeriesGrouping(lumpIdx));
        end

        connections
            connect(Cell1(find(lumpIdx==ModelToLumpMapping)).p,balancingSwitch(lumpIdx).p);
            connect(balancingSwitch(lumpIdx).n,balancingResistor(lumpIdx).p);
            connect(balancingResistor(lumpIdx).n,Cell1(find(lumpIdx==ModelToLumpMapping)).n);
            connect(enableCellBalancing(CumNumModules(lumpIdx)-SeriesGrouping(lumpIdx)+1),balancingSwitch(lumpIdx).vT);
        end
    end

    for lumpIdx = 1:length(SeriesGrouping)
        equations
            vParallelAssembly((CumNumModules(lumpIdx)-SeriesGrouping(lumpIdx)+1):CumNumModules(lumpIdx)) == ...
                (PositiveAdapter(find(lumpIdx==ModelToLumpMapping,1)).CellNode.v - NegativeAdapter(find(lumpIdx==ModelToLumpMapping,1)).CellNode.v) .* ones(SeriesGrouping(lumpIdx),1);
            socParallelAssembly((CumNumModules(lumpIdx)-SeriesGrouping(lumpIdx)+1):CumNumModules(lumpIdx)) == ...
                (sum([Cell1(find(lumpIdx==ModelToLumpMapping)).stateOfCharge]) / ParallelGrouping(lumpIdx)) * ones(SeriesGrouping(lumpIdx),1);
        end
    end

    for modelIdx = 1:TotalNumModels
        equations
            iCell(modelIdx) == Cell1(modelIdx).i;
            vCell(modelIdx) == Cell1(modelIdx).v;
            socCell(modelIdx) == Cell1(modelIdx).stateOfCharge;
            numCyclesCell(modelIdx) == Cell1(modelIdx).num_cycles;
            temperatureCell(modelIdx) == Cell1(modelIdx).cell_temperature;
        end
    end
end